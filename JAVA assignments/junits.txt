Question 4.

package io.capgemini.junit;

public class Junit {

	public int add(int a, int b) {
		return a+b;
	}
	
	public int subtract(int a, int b) {
		return a - b;
	}
}


Test file-------
 
package io.capgemini.junit;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class JunitTest {
	Junit junit;

	@BeforeAll
	static void beforeAllInit() {
		System.out.println("This needs to run before all");
	}

	@AfterAll
	static void afterAllInit() {
		System.out.println("This needs to run after all");
	}

	@BeforeEach
	void init() {
		junit = new Junit();
	}

	@AfterEach
	void cleanup() {
		System.out.println("Cleaning up....");
	}

	@Test
	void testAdd() {
		int expected=2;
		int actual=junit.add(1, 1);
		assertEquals(expected,actual,"The add method should add two numbers");
	}

	@Test
	void testSubtract() {
		int expected=2;
		int actual=junit.subtract(3, 1);
		assertEquals(expected,actual,"The add method should add two numbers");
	}

}

---------------------------------------
question 1.
ackage io.capgemini.junit;

import java.util.Arrays;
import java.util.Collections;

public class MinMaxFinder {
    public static int getMaxValue(int[] array) {
        int value = Integer.MIN_VALUE;

        if (array.length <= 0) {
            throw new IllegalArgumentException("Array is empty.");
        }

        for (int i = 0; i < array.length; i++) {
            if (array[i] > value) {
                value = array[i];
            }
        }
        return value;
    }

    public static int getMinValue(int[] array) {
        int value = Integer.MAX_VALUE;

        if (array.length <= 0) {
            throw new IllegalArgumentException("Array is empty.");
        }

        for (int i=0; i < array.length; i++) {
            if (array[i] < value) {
                value = array[i];
            }
        }
        return value;
    }   
}

test file --

package io.capgemini.junit;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.Rule;
import org.junit.jupiter.api.Test;
import org.junit.rules.ExpectedException;

class MinMaxFinderTest {

    int[] array = new int[] {56,34,7,3,54,3,34,34,53};

    @Test
    public void shouldBeMaxValue() {
        int maxValue = MinMaxFinder.getMaxValue(array);
        assert(maxValue == 56);
    }

    @Test
    public void shouldBeMinValue() {
        int minValue = MinMaxFinder.getMinValue(array);
        assert(minValue == 3);
    }
    
    @Test
    public void shouldBeMaxValue1() {
        int maxValue = MinMaxFinder.getMaxValue(array);
        assert(maxValue == 229);
    }

    @Test
    public void shouldBeMinValue1() {
        int minValue = MinMaxFinder.getMinValue(array);
        assert(minValue == 1);
    }

    @Rule
    public ExpectedException exceptionRule = ExpectedException.none();

    @Test
    public void whenExceptionThrown_thenRuleIsApplied() {
        exceptionRule.expect(NumberFormatException.class);
}
}