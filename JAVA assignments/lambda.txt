Question 1


package com.javaguides.java.lambda;

@FunctionalInterface
interface Arithmetic{
	int operations(int a,int b);
}

public class LambdaAssignment {

	public static void main(String[] args) {
		Arithmetic addition = new Arithmetic()
		{
			@Override
			public int operations(int a,int b){
				return (a+b);
			}
		};
		
		
		Arithmetic subtract = new Arithmetic()
		{
			@Override
			public int operations(int a,int b){
				return (a-b);
			}
		};
		

		Arithmetic multiply = new Arithmetic()
		{
			@Override
			public int operations(int a,int b){
				return (a*b);
			}
		};
		

		Arithmetic divide = new Arithmetic()
		{
			@Override
			public int operations(int a,int b){
				return (a/b);
			}
		};
		
		
		System.out.println("Addition " + addition.operations(10,20));
		System.out.println("Subtraction " + subtract.operations(40,20));
		System.out.println("Divide " + divide.operations(100,20));
		System.out.println("Multiply " + multiply.operations(2,2));

	}
	
	
}


Question 2


package com.lambda.expression;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class Orders 
{
	float orderPrice;
	
  
	public Orders(float orderPrice) 
	{
		super();
		this.orderPrice = orderPrice;
	}
	
	
	public static void main(String[] args) 
	{
	 
        List<Orders> list=new ArrayList<Orders>();  
        list.add(new Orders(17000f));  
        list.add(new Orders(65000f));  
        list.add(new Orders(25000f));  
        list.add(new Orders(15000f));  
        list.add(new Orders(6000f));  
        list.add(new Orders(1000f)); 
        
        Stream<Orders> filtered_data = list.stream().filter(p -> p.orderPrice > 10000);
        filtered_data1 filter= ()->System.out.println("Accepted or rejected");
        
        filter.foo();
        
        filtered_data.forEach(  
                Orders -> System.out.println(Orders.orderPrice) 
        );  
	}
	interface filtered_data1
    {
    	void foo();
    }

    
}




Question 3

Consumer


package com.lambdaexpressionsassignment;

import java.util.function.Consumer;

class Product {
	  private double price = 0.0;

	  public void setPrice(double price) {
	    this.price = price;
	  }

	  public void printPrice() {
	    System.out.println(price);
	  }
	}

public class Consum {
	  public static void main(String[] args) {
	    Consumer<Product> updatePrice = p -> p.setPrice(5.9);
	    Product p = new Product();
	    updatePrice.accept(p);
	    p.printPrice();
	  }
	}





Function



package com.lambdaexpressionsassignment;

import java.util.function.Consumer;

class Product {
	  private double price = 0.0;

	  public void setPrice(double price) {
	    this.price = price;
	  }

	  public void printPrice() {
	    System.out.println(price);
	  }
	}

public class Consum {
	  public static void main(String[] args) {
	    Consumer<Product> updatePrice = p -> p.setPrice(5.9);
	    Product p = new Product();
	    updatePrice.accept(p);
	    p.printPrice();
	  }
	}



Predicate



package com.lambdaexpressionsassignment;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Predic {

	public static void main(String[] args) {
	    List<String> l = new ArrayList<>();
	    l.add("successfully");
	    l.add("easy");
	    l.add("fortune");
	    List<String> filtered = l.stream().filter( s -> s.length() > 5 ).collect(Collectors.<String>toList());
	    System.out.println(filtered);
	  }
	}



Supplier


package com.lambdaexpressionsassignment;

import java.util.function.Supplier;

public class Supply {


	    public static void main(String[] args) {
	        int n = 3;
	        display(() -> n + 10);
	        display(() -> n + 100);
	    }

	    static void display(Supplier<Integer> arg) {
	        System.out.println(arg.get());
	    }
	}




Question 6



package com.lambdaexpressionsassignment;

import java.util.ArrayList;
import java.util.function.UnaryOperator;
	


class Op implements UnaryOperator<String> {
	   public String apply(String str) {
	      return str.toUpperCase();
	   }
	}
	public class Replacing {
	   public static void main(String[] args) throws CloneNotSupportedException {
	      ArrayList<String> list = new ArrayList<>();
	      list.add("Java");
	      list.add("JavaScript");
	      list.add("TypeScript");
	      list.add("MongoDb");
	      list.add("Github");
	      System.out.println("Contents of the list: "+list);
	      list.replaceAll(new Op());
	      System.out.println("Contents of the list after replace operation: \n"+list);
	   }
	}




Question 7


Map To String




package com.lambdaexpressionsassignment;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class Maptostring
{
    public static void main(String[] args)
    {
        Map<String, Integer> lang = new HashMap<>();
 
        lang.put("C++", 1980);
        lang.put("Java", 1995);
        lang.put("Ruby", 1991);
        
        
        for(@SuppressWarnings("unused") Map.Entry<String, Integer> Set : lang.entrySet()) {
 
        	
        	
        	String str = lang.entrySet().stream().map(e -> e.getKey() + ":" + e.getValue())
                    .collect(Collectors.joining("|"));
     
            System.out.println(str);
        }
    }
}



Question 4



package com.lambdaexpressionsassignment;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.function.Predicate;

public class Removeodd {

	    public static void main(String[] args) {
	        ArrayList<String> arrayList = new ArrayList<String>(
	                Arrays.asList("a","abbb","abc", "ab", "cde", "defg", "abcd", "eee"));      
	         
	        Predicate<String> filter = str -> (str.length()%2==1);
	         
	        System.out.println("Original ArrayList          : " + arrayList);
	        boolean value = arrayList.removeIf(filter);
	        System.out.println("Returned value : " + value);
	        System.out.println("ArrayList after removeIf()  : " + arrayList);
	    }
	}





















